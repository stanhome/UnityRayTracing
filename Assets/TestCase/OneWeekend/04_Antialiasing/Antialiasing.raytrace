#include "./../../Common/RaygenCommon.hlsl"
#include "./../../Common/PRNG.hlsl"

RWTexture2D<float4> RenderTarget;
float4 _RenderTargetSize;
float _AlphaAA;

#pragma max_recursion_depth 1


[shader("raygeneration")]
void AntialiasingRayGenShader()
{
	const uint2 dispatchIdx = DispatchRaysIndex().xy;
	const uint PRNGIndex = dispatchIdx.y * (int)_RenderTargetSize.x + dispatchIdx.x;
	uint4 PRNGStates = _PRNGStates[PRNGIndex];

	// 
	float4 finalColor = float4(0, 0, 0, 0);
	float3 origin;
	float3 direction;
	float2 offset = float2(getRandomValue(PRNGStates), getRandomValue(PRNGStates));
	generateCameraRayWithOffset(origin, direction, offset);

	RayDesc rayDescriptor;
	rayDescriptor.Origin = origin;
	rayDescriptor.Direction = direction;
	rayDescriptor.TMin = 1e-5f;
	rayDescriptor.TMax = _CameraFarDistance;

	RayIntersection rayIntersection;
	rayIntersection.PRNGStates = PRNGStates;
	rayIntersection.color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	TraceRay(_AccelerationStructure, RAY_FLAG_CULL_BACK_FACING_TRIANGLES, 0xFF, 0, 1, 0, rayDescriptor, rayIntersection);
	PRNGStates = rayIntersection.PRNGStates;
	finalColor += rayIntersection.color;

	_PRNGStates[PRNGIndex] = PRNGStates;

	// lerp with last frame
	finalColor = lerp(RenderTarget[dispatchIdx], finalColor, _AlphaAA);

	RenderTarget[dispatchIdx] = finalColor;
}


[shader("miss")]
void MissShader(inout RayIntersection rayIntersection: SV_RayPayload) {
    float3 origin = WorldRayOrigin();
    float3 direction = WorldRayDirection();


    rayIntersection.color = float4(bgColor(origin, direction), 1.0f);
}

